#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

///PROTOTIPADO///////////////////////////////////////

///ESTRUC PELICULAS//////////////////////////////////
typedef struct
{
    int idPelicula;
    char nombre[50];
    int anio;
    char genero[10];
    char actores[3][50];
    int calificacion;
    int estado;
} stPelicula;
///VerificarSiLaPeliculaExiste///////////////////////
bool VerificarPelicula(char nombre[], char pelis[]);

///AgregarPeliculas//////////////////////////////////
stPelicula AgregarUnaPeli(char pelis[], int *maxId);
void CargarPeliculas(char pelis[], int maxId);

///MostrarPelis//////////////////////////////////////
void MostrarMuchasPeliculas(char pelis[]);

///AgregarUnaId//////////////////////////////////////
void AgregarId(char pelis[], int *maxId);

///BuscarYeliminarUnaPelicula////////////////////////
void BuscarYeliminarPelicula(char pelis[], char eliminarPeli[], int idBuscar);

///MostrarPeliculasBajadas/////////////////////////////
void MostrarPeliculasBajadas(char eliminarPeli[]);

///RepotenerPeliculas//////////////////////////////////
void RecuperarBajas(char eliminarPeli[], char pelis[], int idBuscar);

///BorrarTodasLasPeliculas/////////////////////////////
void BorrarTodasPelisYnoGuardar(char pelis[], char eliminarPeli[]);

///BuscarYmodificarUnaPelicula//////////////
void BuscarYmodificarUnaPelicula(char pelis[], int idBuscar);

///MENU/////////////////////////////////////
void Menu(char pelis[]);

///Modificaciones//////////////////////////
void ModificarNombre(char pelis[], char nuevoNombre[]);

///Busqueda//////////////////////////////
void BuscarYmostrarUnaPelicula(char pelis[]);



///MAIN//////////////////////////////////////////////
int main()
{
    system("color 3F");
    char nuevaPeli[]="Peliculas";///Archivo en el que guardan las peliculas///////////////
    char bajaPeli[]="PeliculasEliminadas";///Archivo en el que guardan las peliculas que fueron eliminadas/////////////

    ///MENU//////////////////////////////////////////
    int opcion=0, maxId=0, idBuscar=0;
    char control='s';
    ///**////////////////////////////////////////////


    do
    {
        printf("\n--------MENU PELICULAS--------\n");
        printf("1.Cargar peliculas.\n2.Mostrar la peliculas cargadas.\n3.Cargar solo UNA pelicula.\n4.Buscar y dar de baja una pelicula.\n5.Mostrar peliculas que fueron dada de baja.\n");
        printf("6.Restaurar una pelicula eliminada.\n7.Eliminar TODAS las peliculas registradas.\n8.Buscar y modificar un dato.\n9.Buscar una pelicula.\n");
        printf("Ingrese la opcion a realizar: \n");
        scanf("%d", &opcion);
        system("pause");
        system("cls");

        switch(opcion)
        {
        case 1:///AgregarPeliculas//////////////////
            CargarPeliculas(nuevaPeli, maxId);
            break;
        case 2:///MostrasPelis/////////////
            MostrarMuchasPeliculas(nuevaPeli);
            break;
        case 3:///CargarSoloUnaPelicula////////////
            CargarUnaPeli(nuevaPeli, maxId);
            break;
        case 4:
            printf("\nIngrese la ID que desea buscar en el archivo: \n");
            scanf("%d",&idBuscar);

            BuscarYeliminarPelicula(nuevaPeli, bajaPeli, idBuscar);
            break;
        case 5:
            MostrarPeliculasBajadas(bajaPeli);
            break;
        case 6:
            printf("\nIngrese la ID que desea buscar en el archivo: \n");
            scanf("%d", &idBuscar);

            RecuperarBajas(bajaPeli, nuevaPeli, idBuscar);
            break;
        case 7:
            printf("\n\n------!!ATENCION!!------\n\n");
            printf("Esta opcion BORRARA y NO GUARDARA las peliculas elimindas, desea continuar? (s|n)\n\n");
            fflush(stdin);
            scanf("%c", &control);

            if(control=='s')
            {
                BorrarTodasPelisYnoGuardar(nuevaPeli, bajaPeli);
            }
            else
            {
                printf("\nNo se realizara la opcion seleccionada.\nRetrocediendo...\n");
                break;
            }
            break;
        case 8:
            printf("\nIngrese el ID de la pelicula que desea modificar: \n");
            scanf("%d", &idBuscar);

            BuscarYmodificarUnaPelicula(nuevaPeli, idBuscar);
            break;
        case 9:
            BuscarYmostrarUnaPelicula(nuevaPeli);
            break;
        default:
            printf("\nERROR: INGRESE UNA OPCION VALIDAD.\n");
            break;
        }

        printf("\nDesea realizar otra operacion? (s|n)\n");
        fflush(stdin);
        scanf("%c", &control);
    }
    while(control=='s');

    return 0;
}
///*/////////////////////////////////////////////////////////////////////////////////////////
///FUNCIONES PARA LA CARGA DE ARCHIVOS///////////////////////////////////////////////////////
///*/////////////////////////////////////////////////////////////////////////////////////////

///*******FUNCION PARA LA ID******//////////////////////////////////////////////////////

///AgregarId/////////////////////////////////////////////////
void AgregarId(char pelis[], int *maxId)
{
    FILE *archivo=fopen(pelis, "rb");
    stPelicula aux;

    if(archivo)
    {
        while(fread(&aux, sizeof(stPelicula), 1, archivo) >0)
        {
            if(aux.idPelicula > (*maxId))
            {
                (*maxId)=aux.idPelicula;
            }
        }
        fclose(archivo);
        (*maxId)++;
    }
    else
    {
        printf("\nERROR: No pudo abrirse el archivo.\n");
    }
}

///Validad si una pelicula se encuentra/////////////////////////////////////////
bool VerificarPelicula(char nombre[], char pelis[])
{
    FILE *archivo=fopen(pelis, "rb");
    stPelicula aux;

    if(archivo)
    {
        while(fread(&aux, sizeof(stPelicula), 1, archivo) >0)
        {
            if(strcmp(aux.nombre, nombre) == 0)
            {
                fclose(archivo);
                return true;//El archivo ya existe
            }
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: No pudo abrirse el archivo.\n");
    }
    return false;
}

///1*AgregarUnaPelicula////////////////////////////////////////
stPelicula AgregarUnaPeli(char pelis[], int *maxId)
{
    stPelicula nuevaPeli;
    int j=0;

    nuevaPeli.idPelicula= (*maxId);

    printf("\nIngrese el nombre de la pelicula: \n");
    fflush(stdin);
    gets(nuevaPeli.nombre);
    if(VerificarPelicula(nuevaPeli.nombre,pelis))
    {
        printf("\nERROR: La pelicula ya se encuentra cargada en el archivo.\n");
        nuevaPeli.idPelicula= -1;
        return nuevaPeli;
    }

    printf("Ingrese el anio de la pelicula: \n");
    scanf("%d", &nuevaPeli.anio);

    printf("Ingrese el genero de la pelicula: \n");
    fflush(stdin);
    gets(nuevaPeli.genero);

    for(j=0; j<3; j++)
    {
        printf("Ingrese los actores de la pelicula: \n");
        gets(nuevaPeli.actores[j]);
    }

    printf("Ingrese la calificacion de la pelicula: \n");
    scanf("%d", &nuevaPeli.calificacion);

    nuevaPeli.estado=1;///1 significa que la pelicula se encuentra.

    (*maxId)++;
    return nuevaPeli;
}

///1*CargarMuchasPeliculas/////////////////////////////////////
void CargarPeliculas(char pelis[], int maxId)
{
    stPelicula nuevaPeli;
    char control='s';

    FILE* archivo=fopen(pelis, "ab");

    if(archivo)
    {
        while(control=='s')
        {
            nuevaPeli = AgregarUnaPeli(pelis, &maxId);

            if(nuevaPeli.idPelicula !=-1)
            {
                fwrite(&nuevaPeli, sizeof(stPelicula), 1, archivo);
            }
            printf("\nHay mas peliculas para cargar? (s|n)");
            fflush(stdin);
            scanf("%c", &control);
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: No pudo abrirse el archivo.\n");
    }
}

///AgregarSoloUnaPelicula//////////////////////////////////////
void CargarUnaPeli(char pelis[], int *maxId)
{
    FILE *archivo=fopen(pelis, "ab");
    stPelicula aux;

    if(archivo)
    {
        AgregarId(pelis, &maxId);
        aux=AgregarUnaPeli(pelis, &maxId);
        if(aux.idPelicula!=-1)
        {
            fwrite(&aux, sizeof(stPelicula), 1, archivo);
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: El archivo no pudo abrirse.\n");
    }
}
///**////////////////////////////////////////////////////////////////////////////////////
///*******FUNCIONES PARA MOSTRAR****/////////////////////////////////////////////////////
///**////////////////////////////////////////////////////////////////////////////////////

///2*MostrarUnaPelicula///////////////////////////////////////
void MostrarUnaPelicula(stPelicula nuevaPeli)
{
    int actor=1;

    printf("\nID de la pelicula: %d\n", nuevaPeli.idPelicula);
    printf("\nEl nombre de la pelicula es: %s\n", nuevaPeli.nombre);
    printf("El anio de la pelicula es: %d\n", nuevaPeli.anio);
    printf("El genero de la pelicula es: %s\n", nuevaPeli.genero);
    for(int j=0; j<3; j++)
    {
        printf("El actor de la pelicula es: %s (%d|3)\n",nuevaPeli.actores[j], actor++);
    }
    printf("La calificacion de la pelicula es: %d\n", nuevaPeli.calificacion);
    printf("Estado de la peli: %d\n", nuevaPeli.estado);
    printf("----------------------------------------------------------------------\n");
}

///2*MostrarMuchasPeliculas///////////////////////////////////
void MostrarMuchasPeliculas(char pelis[])
{
    FILE *archivo=fopen(pelis,"rb");
    stPelicula aux;

    if(archivo)
    {
        while(fread(&aux, sizeof(stPelicula), 1, archivo) >0)
        {
            MostrarUnaPelicula(aux);
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: El archivo no pudo abrirse.\n");
    }
}

///*/////////////////////////////////////////////////////////////////////////////////////////
///FUNCIONES PARA LA BAJA DE ARCHIVOS////////////////////////////////////////////////////////
///*/////////////////////////////////////////////////////////////////////////////////////////

///**BuscarYeliminarUnaPelicula///////////////////////////////////////////////////
void BuscarYeliminarPelicula(char pelis[], char eliminarPeli[], int idBuscar)
{
    FILE *archivo=fopen(pelis, "r+b");
    FILE *archivoDos=fopen(eliminarPeli, "ab");

    bool encontrada=0;
    stPelicula aux;

    if(archivo && archivoDos)
    {
        while(fread(&aux, sizeof(stPelicula), 1, archivo) >0)
        {
            if(aux.idPelicula==idBuscar)
            {
                encontrada=true;
                aux.estado=0;
                fseek(archivo, -sizeof(stPelicula), SEEK_CUR);
                fwrite(&aux, sizeof(stPelicula), 1, archivo);
                fwrite(&aux, sizeof(stPelicula),1, archivoDos);
                printf("\nPelicula eliminada correctamente.\n");
                break;
            }
        }
        if(!encontrada)
        {
            printf("\nNo se encontro ninguna pelicula con esa id.\n");
        }
        fclose(archivo);
        fclose(archivoDos);
    }
    else
    {
        printf("\nEl archivo no pudo abrise.\n");
    }
}

///MostrarElArchivoDePeliculasEliminadas/////////////////////////////////////////
void MostrarPeliculasBajadas(char eliminarPeli[])
{
    FILE *archivo=fopen(eliminarPeli,"rb");
    stPelicula aux;

    if(archivo)
    {
        while(fread(&aux, sizeof(stPelicula), 1, archivo) >0)
        {
            MostrarUnaPelicula(aux);

        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: El archivo no pudo abrirse.\n");
    }
}
///RecuperarBajas//////////////////////////////////////////////////////////////////
void RecuperarBajas(char eliminarPeli[], char pelis[], int idBuscar)
{
    FILE *archivo= fopen(eliminarPeli, "r+b");
    FILE *archivoDos= fopen(pelis, "r+b");

    bool encontrado=false;
    stPelicula aux;

    if(archivo && archivoDos)
    {
        while(fread(&aux, sizeof(stPelicula), 1, archivo) >0)
        {
            if(aux.idPelicula==idBuscar)
            {
                encontrado=true;
                aux.estado=1;
                fseek(archivo, -sizeof(stPelicula), SEEK_CUR);
                fwrite(&aux, sizeof(stPelicula), 1, archivo);

                fseek(archivoDos, sizeof(stPelicula), SEEK_END);
                fwrite(&aux, sizeof(stPelicula), 1 ,archivoDos);
                printf("\nPelicula restaurada.\n");
                break;
            }
        }
        if(!encontrado)
        {
            printf("\nNo se encontro el id a buscar.\n");
        }
        fclose(archivoDos);
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: No pudo abrirse uno o dos archivos.\n");
    }
}
///BorrarTodasLasPeliculasCargadas//////////////////////////////////////////////
void BorrarTodasPelisYnoGuardar(char pelis[], char eliminarPeli[])
{
    FILE *archivo=fopen(pelis,"wb");
    FILE *archivoDos=fopen(eliminarPeli, "wb");
    if(archivo && archivoDos)
    {
        printf("\nSe han borrado todas las pelis.\n");
    }
    else
    {
        printf("\nERROR: No se han podido borrar las peliculas.\n");
    }
}

///*/////////////////////////////////////////////////////////////////////////////////////////
///FUNCIONES PARA LA MODIFICACION DE ARCHIVOS////////////////////////////////////////////////
///*/////////////////////////////////////////////////////////////////////////////////////////


///BuscarYmodificarUnaPelicula/////////////////////////////////
void BuscarYmodificarUnaPelicula(char pelis[], int idBuscar)
{
    FILE *archivo= fopen(pelis, "r+b");
    stPelicula aux;

    bool encontrado=false;

    char continuar='s';

    if(archivo)
    {
        while(fread(&aux, sizeof(stPelicula), 1, archivo) >0)
        {
            if(aux.idPelicula==idBuscar)
            {
                encontrado=true;

                char continuar='s';
                int opcion=0, actor=1;

                char nuevoNombre[50];
                char nuevoGenero[30];
                char nuevoActor[3][50];
                int nuevoAnio=0;
                int nuevaCalifi=0;
                int nuevoEstado=0;

                do
                {
                    printf("\n\n-----MENU-----\n\n");
                    printf("\n--MODIFICACION DE PELICULAS--\n");
                    printf("1.Modificar nombre.\n2.Modificar anio.\n3.Modificar genero.\n4.Modificar actores.\n");
                    printf("Ingrese la opcion a realizar: \n");
                    scanf("%d", &opcion);

                    switch(opcion)
                    {
                    case 1:
                        printf("\nIngrese el nuevo nombre: \n");
                        fflush(stdin);
                        gets(nuevoNombre);

                        ModificarNombre(pelis, nuevoNombre);
                        break;
                    case 2:
                        printf("\nIngrese el nuevo anio: \n");
                        scanf("%d", &nuevoAnio);

                        ModificarAnio(pelis, nuevoAnio);
                        break;
                    case 3:
                        printf("\nIngrese el/los nuevos generos: \n");
                        fflush(stdin);
                        gets(nuevoGenero);

                        ModificarGenero(pelis, nuevoGenero);
                        break;
                    case 4:
                        printf("\nIngrese los nuevos actores: \n");
                        for(int i=0; i<3; i++)
                        {
                            printf("Actor: \n");
                            fflush(stdin);
                            gets(nuevoActor[i]);
                        }

                        ModificarActores(pelis, nuevoActor);
                        break;
                    case 5:
                        printf("\nIngrese la nueva calificacion: \n");
                        scanf("%d", &nuevaCalifi);

                        ModificarCalificacion(pelis, nuevaCalifi);
                        break;
                    case 6:
                        printf("\nIngrese el estado de la pelicula (1:Activo | 0:Inactivo)");
                        scanf("%d", &nuevoEstado);

                        ModificarEstado(pelis, nuevoEstado);
                        break;
                    default:
                        printf("\nERROR: Ingrese una opcion valida.\n");
                        break;
                    }
                    printf("\nDesea modificar un campo algo mas? (s|n)");
                    fflush(stdin);
                    scanf("%c", &continuar);
                }
                while(continuar=='s');
                break;
            }
        }
        if(!encontrado)
        {
            printf("\nERROR: No se ha encontrado el ID buscado.\n");
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: No pudo abrirse el archivo.\n");
    }
}

///*/////////////////////////////////////////////////////////////
///**ModificarNombre/////////////////////////////////////////////
///*/////////////////////////////////////////////////////////////

///***NOMBRE/////////////////////////////////////////////////////
void ModificarNombre(char pelis[], char nuevoNombre[])
{
    FILE *archivo= fopen(pelis, "r+b");
    stPelicula aux;

    if(archivo)
    {
        while(fread(&aux, sizeof(stPelicula), 1, archivo) >0)
        {
            strcpy(aux.nombre, nuevoNombre);
            fseek(archivo, -sizeof(stPelicula), SEEK_CUR);
            fwrite(&aux, sizeof(stPelicula), 1, archivo);
            printf("\nNombre modificado correctamente.\n");
            break;
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: No pudo abrirse el archivo.\n");
    }
}

///**ANIO///////////////////////////////////////////////////////
void ModificarAnio(char pelis[], int nuevoAnio)
{
    FILE *archivo= fopen(pelis, "r+b");
    stPelicula aux;

    if(archivo)
    {
        while(fread(&aux, sizeof(stPelicula),1,archivo) >0)
        {
            aux.anio=nuevoAnio;
            fseek(archivo, -sizeof(stPelicula), SEEK_CUR);
            fwrite(&aux, sizeof(stPelicula), 1, archivo);
            printf("\nEl anio fue modificado correctamente.\n");
            break;
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: El archivo no pudo abrirse.\n");
    }


}

///**Genero///////////////////////////////////////////////////////
void ModificarGenero(char pelis[], char nuevoGenero[])
{
    FILE *archivo= fopen(pelis,"r+b");
    stPelicula aux;

    if(archivo)
    {
        while(fread(&aux, sizeof(stPelicula), 1, archivo) >0)
        {
            strcpy(aux.genero, nuevoGenero);
            fseek(archivo, -sizeof(stPelicula), SEEK_CUR);
            fwrite(&aux, sizeof(stPelicula), 1, archivo);
            printf("\nGenero modificado correctamente.\n");
            break;
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: El archivo no pudo abrise correctamente.\n");
    }
}

///**Actores//////////////////////////////////////////////////////
void ModificarActores(char pelis[], char nuevosActor[][50])
{
    FILE *archivo= fopen(pelis, "r+b");
    stPelicula aux;

    if(archivo)
    {
        while(fread(&aux, sizeof(stPelicula), 1, archivo) >0)
        {
            for(int i=0; i<3; i++)
            {
                strcpy(aux.actores[i], nuevosActor[i]);
            }
            fseek(archivo, -sizeof(stPelicula), SEEK_CUR);
            fwrite(&aux, sizeof(stPelicula), 1, archivo);
            printf("\nActores de la película modificados correctamente.\n");
            break;

        }
        fclose(archivo);
    }else
    {
        printf("\nERROR: No se pudo abrir el archivo.\n");
    }

}

///**calificacion/////////////////////////////////////////////////
void ModificarCalificacion(char pelis[], int nuevaCali)
{
    FILE *archivo= fopen(pelis, "r+b");
    stPelicula aux;

    if(archivo)
    {
        while(fread(&aux, sizeof(stPelicula), 1, archivo) >0)
        {
            aux.calificacion=nuevaCali;
            fseek(archivo, -sizeof(stPelicula), SEEK_CUR);
            fwrite(&aux, sizeof(stPelicula), 1, archivo);
            printf("\nLa calificacion fue modificada exitosamente.\n");
            break;
        }
        fclose(archivo);
    }else
    {
        printf("\nERROR: No pudo abrirse el archivo.\n");
    }
}

///**estado////////////////////////////////////////////////////
void ModificarEstado(char pelis[], int nuevoEstado)
{
    FILE *archivo= fopen(pelis, "r+b");
    stPelicula aux;

    if(archivo)
    {
        while(fread(&aux, sizeof(stPelicula), 1, archivo) >0)
        {
            aux.estado=nuevoEstado;
            fseek(archivo, -sizeof(stPelicula), SEEK_CUR);
            fwrite(&aux, sizeof(stPelicula), 1, archivo);
            printf("\nEl estado fue modificado exitosamente.\n");
            break;
        }
        fclose(archivo);
    }else
    {
        printf("\nERROR: El archivo no pudo abrirse correctamente.\n");
    }
}


///**///////////////////////////////////////////////////////////
///CONSULTA/////////////////////////////////////////////////////
///**///////////////////////////////////////////////////////////

void BuscarYmostrarUnaPelicula(char pelis[])
{
    FILE *archivo= fopen(pelis, "rb");
    stPelicula aux;

    if(archivo)
    {
        while(fread(&aux, sizeof(stPelicula), 1, archivo) >0)
        {

                char continuar='s';
                int opcion=0;

                char BuscarNombre[50];
                char BuscarGenero[30];
                char BuscarActor[3][50];
                int BuscarAnio=0;
                int BuscarCalifi=0;
                int BuscarEstado=0;

                do
                {
                    printf("\n\n-----MENU-----\n\n");
                    printf("\n--BUSQUEDA DE PELICULAS--\n");
                    printf("1.Por nombre.\n2.Por anio.\n3.Por genero.\n4.Por actores.\n5.Por calificacion.\n6.Buscar por Estado.\n");
                    printf("Ingrese la opcion a realizar: \n");
                    scanf("%d", &opcion);

                    switch(opcion)
                    {
                    case 1:
                        printf("\nIngrese el nombre a buscar: \n");
                        fflush(stdin);
                        gets(BuscarNombre);

                        BuscarPorNombre(pelis, BuscarNombre);
                        break;
                    case 2:
                        printf("\nIngrese el anio a buscar: \n");
                        scanf("%d", &BuscarAnio);

                        BuscarPorAnio(pelis, BuscarAnio);
                        break;
                    case 3:
                        printf("\nIngrese los generos a buscar: \n");
                        fflush(stdin);
                        gets(BuscarGenero);

                        BuscarPorGenero(pelis, BuscarGenero);
                        break;
                    case 4:
                        printf("\nIngrese los actores a buscar: \n");
                        for(int i=0; i<3; i++)
                        {
                            printf("Actor: \n");
                            fflush(stdin);
                            gets(BuscarActor[i]);
                        }

                        BuscarPorActor(pelis, BuscarActor);
                        break;
                    case 5:
                        printf("\nIngrese la calificacion a buscar: \n");
                        scanf("%d", &BuscarCalifi);

                        BuscarPorCalificacion(pelis, BuscarCalifi);
                        break;
                    case 6:
                        printf("\nIngrese el estado a buscar (1:Activo | 0:Inactivo)");
                        scanf("%d", &BuscarEstado);

                        BuscarPorEstado(pelis, BuscarEstado);
                        break;
                    default:
                        printf("\nERROR: Ingrese una opcion valida.\n");
                        break;
                    }
                    printf("\nDesea seguir buscando una pelicula? (s|n)");
                    fflush(stdin);
                    scanf("%c", &continuar);
                }
                while(continuar=='s');
                break;
            }
            fclose(archivo);
        }
    else
    {
        printf("\nERROR: No pudo abrirse el archivo.\n");
    }
}

///BuscarPorNombre//////////////////////////////
void BuscarPorNombre(char pelis[], char BuscarNombre[])
{
    FILE *archivo= fopen(pelis, "rb");
    stPelicula aux;

    bool encontrado=false;

    if(archivo)
    {
        while(fread(&aux, sizeof(stPelicula), 1, archivo) >0)
        {
            if(strcpy(aux.nombre, BuscarNombre))
            {
                encontrado=true;
                MostrarUnaPelicula(aux);
                break;
            }
        }
        if(!encontrado)
        {
            printf("\nNo se encontró ninguna película con ese nombre.\n");
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: No pudo abrirse el archivo.\n");
    }
}

///BuscarPorAnio/////////////////////////////////
void BuscarPorAnio(char pelis[], int BuscarAnio)
{
    FILE *archivo= fopen(pelis, "rb");
    stPelicula aux;

    bool encontrado=false;

    if(archivo)
    {
        while(fread(&aux, sizeof(stPelicula), 1, archivo) >0)
        {
            if(aux.anio==BuscarAnio)
            {
                encontrado=true;
                MostrarUnaPelicula(aux);
                break;
            }
        }
        if(!encontrado)
        {
            printf("\nNo se encontró ninguna película con ese nombre.\n");
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: No pudo abrirse el archivo.\n");
    }
}

///BuscarPorGenero/////////////////////////////////

void BuscarPorGenero(char pelis[], char BuscarGenero[])
{
    FILE *archivo= fopen(pelis, "rb");
    stPelicula aux;

    bool encontrado=false;

    if(archivo)
    {
        while(fread(&aux, sizeof(stPelicula), 1, archivo) >0)
        {
            if(strcpy(aux.genero, BuscarGenero))
            {
                encontrado=true;
                MostrarUnaPelicula(aux);
                break;
            }
        }
        if(!encontrado)
        {
            printf("\nNo se encontró ninguna película con ese nombre.\n");
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: No pudo abrirse el archivo.\n");
    }
}

///BuscarPorActor///////////////////////////////////
void BuscarPorActor(char pelis[], char BuscarActor[][50])
{
    FILE *archivo= fopen(pelis, "rb");
    stPelicula aux;

    if(archivo)
    {
        while(fread(&aux, sizeof(stPelicula), 1, archivo) >0)
        {
            for(int i=0; i<3; i++)
            {
                strcpy(aux.actores[i], BuscarActor[i]);
            }
            MostrarUnaPelicula(aux);
            break;

        }
        fclose(archivo);
    }else
    {
        printf("\nERROR: No se pudo abrir el archivo.\n");
    }

}

///BuscarPorCalificacion////////////////////////////
void BuscarPorCalificacion(char pelis[], int BuscarCalificacion)
{
    FILE *archivo= fopen(pelis, "rb");
    stPelicula aux;

    bool encontrado=false;

    if(archivo)
    {
        while(fread(&aux, sizeof(stPelicula), 1, archivo) >0)
        {
            if(aux.calificacion==BuscarCalificacion)
            {
                encontrado=true;
                MostrarUnaPelicula(aux);
                break;
            }
        }
        if(!encontrado)
        {
            printf("\nNo se encontró ninguna película con ese nombre.\n");
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: No pudo abrirse el archivo.\n");
    }
}

///BuscarPorEstado////////////////////////////////
void BuscarPorEstado(char pelis[], int BuscarEstado)
{
    FILE *archivo= fopen(pelis, "rb");
    stPelicula aux;

    bool encontrado=false;

    if(archivo)
    {
        while(fread(&aux, sizeof(stPelicula), 1, archivo) >0)
        {
            if(aux.estado==BuscarEstado)
            {
                encontrado=true;
                MostrarUnaPelicula(aux);
                break;
            }
        }
        if(!encontrado)
        {
            printf("\nNo se encontró ninguna película con ese nombre.\n");
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: No pudo abrirse el archivo.\n");
    }
}





