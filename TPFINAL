#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include "pila.h"

///**////////////////////////////////////
///PROTOTIPADO///////////////////////////
///**////////////////////////////////////

///ESTRUCTURA////////
typedef struct
{
    char nombreYapellido[50];
    int legajo;
    char dni[16];
    char antiguedad[30];
    char sexo;
    int* cantidadDeVentas;
    int sueldo;
    int estado;
    Pila* sueldosPasados;
} stEmpleado;

#define ADMIN_USER "admin"
#define ADMIN_PASS "admin123"
#define MAX_INTENTOS 3

int validarCredenciales(int intento);

///**CARGAR EL ARCHIVO DE EMPLEADOS////////////////////////////////
void cargarArchivoEmpleados(char emple[]);

///**MOSTRAR EL ARCHIVO DE EMPLEADOS///////////////////
void mostrarEmpleados(char emple[]);

///**BUSCAR Y ELIMINAR UN EMPLEADO DEL ARCHIVO////////////
void buscarYeliminar(char emple[], char eliminados[], char dni[]);

///**MOSTRAR EMPLEADOS DADO DE BAJA///////////////////////
void mostrarEmpleBajados(char elimanods[]);

///**MODIFICAR EMPLEADOS/////////////////////////////////
void buscarYmodificarUnEmpleado(char emple[], char dni[]);

///**BUSCAR EMPLEADOS////////////////////////////////////
void menuParaBuscar(char emple[]);

///**ORDENAR NOMBRES/////////////////////////////////////
void ordenarEmpleadoPorNombre(char emple[]);

///**ORDENAR POR LEGAJO/////////////////////////////////
void ordenarPorLegajo(char emple[]);

///**////////////////////////////////////
///MAIN//////////////////////////////////
///**////////////////////////////////////

int main()
{
    system("color 3F");

    char empleados[]="ArchivoEmpleados";///Archivo de empleados original
    char eliminados[]="EmpleadosEliminados";///Archivo de empleados dado de baja

    char control='s', buscarDni[16];
    int opcion=0, intento = 1;

    if(validarCredenciales(intento))
    {

    do
    {
        printf("\n-----MENU-----\n");
        printf("1.Agregar empleados al archivo.\n2.Mostrar el archivo de empleados.\n3.Buscar y Eliminar un empleado del archivo.\n4.Mostrar empleados dado de baja.\n5.Modificar empleados.\n6.Buscar un empleado y mostrarlo.\n");
        printf("7.Ordenar empleados por nombre\n8.Ordenar empleados por legajo.\n9.Mostrar sueldos pasados del empleado.\n");
        printf("Ingrese la opcion que desea realizar.\n");
        scanf("%d", &opcion);
        system("pause");
        system("cls");

        switch(opcion)
        {
        case 1:
            cargarArchivoEmpleados(empleados);
            break;
        case 2:
            mostrarEmpleados(empleados);
            break;
        case 3:
            printf("\nIngrese el DNI que desea buscar y dar de baja: \n");
            fflush(stdin);
            gets(buscarDni);

            buscarYeliminar(empleados, eliminados, buscarDni);
            break;
        case 4:
            mostrarEmpleBajados(eliminados);
            break;
        case 5:
            printf("\nIngrese el DNI del empleado que desea modificar: \n");
            fflush(stdin);
            gets(buscarDni);

            buscarYmodificarUnEmpleado(empleados, buscarDni);
            break;
        case 6:
            menuParaBuscar(empleados);
            break;
        case 7:
            ordenarEmpleadoPorNombre(empleados);
            break;
        case 8:
            ordenarPorLegajo(empleados);
            break;
        case 9:
            printf("\nIngrese el DNI del empleado cuyos sueldos pasados desea ver: \n");
            fflush(stdin);
            gets(buscarDni);

            mostrarSueldosPasados(empleados, buscarDni);
            break;
        default:
            printf("\nERROR: Opcion no valida.\n");
            break;
        }
        printf("\nDesea realizar otra opcion: (s|n)\n");
        fflush(stdin);
        scanf("%c", &control);
    }
    while(control=='s');

    }else
    {
        printf("\nACCESO DENEGADO.\n");
        return 1;
    }
    return 0;
}

///**////////////////////////////////////
///FUNCIONES/////////////////////////////
///**////////////////////////////////////

int validarCredenciales(int intento)
{
    char usuario[50], contra[50];

    if(intento == MAX_INTENTOS)
    {
        printf("\nHa alcanzado el maximo de intentos permitidos.\n");
        return 0;
    }

    printf("\nIngrese el usuario: \n");
    fflush(stdin);
    gets(usuario);

    printf("\nIngrese la contrasenia: \n");
    fflush(stdin);
    gets(contra);

    if(strcmp(usuario, ADMIN_USER) == 0 && strcmp(contra,ADMIN_PASS) == 0)
    {
        return 1;
    }else
    {
        printf("\nUsuario o contraseÃ±a incorrectos. Intentos restantes: %d\n", MAX_INTENTOS-intento);
        return validarCredenciales(intento+1);
    }
}


///-----------------------------------------------------------/////////////////
///----------APARTADO EXCLUSIVAMENTE DE ALTA------------------/////////////////
///-----------------------------------------------------------/////////////////

///VERIFICAR SI EL EMPLEADO YA FUE CARGADO POR DNI///////
bool verificarDNI(char dni[], char emple[])
{
    FILE *archivo=fopen(emple, "rb");
    stEmpleado aux;

    if(archivo)
    {
        while(fread(&aux, sizeof(stEmpleado), 1, archivo) >0)
        {
            if(strcmp(aux.dni, dni) == 0)
            {
                fclose(archivo);
                return true;//El archivo ya existe
            }
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: No pudo abrirse el archivo.\n");
    }
    return false;
}

///SEGUNDO VERIFICADOR POR NOMBRE////////////////
bool verificarNombre(char nombreyApellido[], char emple[])
{
    FILE *archivo=fopen(emple, "rb");
    stEmpleado aux;

    if(archivo)
    {
        while(fread(&aux, sizeof(stEmpleado), 1, archivo) >0)
        {
            if(strcmp(aux.nombreYapellido, nombreyApellido) == 0)
            {
                fclose(archivo);
                return true;//El archivo ya existe
            }
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: No pudo abrirse el archivo.\n");
    }
    return false;
}

///CARGAR UN SOLO EMPLEADO///////////////
stEmpleado cargarUnEmpleado(char emple[])
{
    stEmpleado nuevoEmpleado;

    printf("Ingrese el nombre y el apellido del empleado.\n");
    fflush(stdin);
    gets(nuevoEmpleado.nombreYapellido);

    if(verificarNombre(nuevoEmpleado.nombreYapellido, emple))
    {
        printf("\nERROR: El empleado ya existe en el archivo.\n");
        nuevoEmpleado.estado=-1;
        return nuevoEmpleado;
    }

    printf("Ingrese el legajo el empleado.\n");
    scanf("%d", &nuevoEmpleado.legajo);

    printf("Ingrese el dni del empleado.\n");
    fflush(stdin);
    gets(nuevoEmpleado.dni);

    if(verificarDNI(nuevoEmpleado.dni, emple))
    {
        printf("\nERROR: El empleado ya existe en el archivo.\n");
        nuevoEmpleado.estado= -1;
        return nuevoEmpleado;
    }

    printf("Ingrese la antiguedad del empleado.(D/M/A)\n");
    fflush(stdin);
    gets(nuevoEmpleado.antiguedad);

    printf("Ingrese el sexo del empleado.(M,F,O)\n");
    fflush(stdin);
    scanf("%c", &nuevoEmpleado.sexo);

    printf("Ingrese la cantidad de ventas del empleado.\n");
    scanf("%d", &nuevoEmpleado.cantidadDeVentas);

    printf("Ingrese el sueldo del empleado.\n");
    scanf("%d", &nuevoEmpleado.sueldo);

    nuevoEmpleado.estado = 1;

    return nuevoEmpleado;
}

///CARGAR ARCHIVO DE EMPLEADOS//////////
void cargarArchivoEmpleados(char emple[])
{
    FILE *archivo=fopen(emple, "ab");
    stEmpleado aux;

    char control='s';

    if(archivo)
    {
        while(control=='s')
        {
            aux = cargarUnEmpleado(emple);
            if(aux.estado !=-1)
            {
                fwrite(&aux, sizeof(stEmpleado), 1, archivo);
            }
            printf("\nDesea seguir cargando nuevos empleados al archivo? (s|n)");
            fflush(stdin);
            scanf("%c", &control);
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: El archivo no pudo abrirse para cargar nuevos empleados.\n");
    }
}

///-----------------------------------------------------------/////////////////
///----------APARTADO EXCLUSIVAMENTE DE MUESTRA------------------//////////////
///-----------------------------------------------------------/////////////////

///MOSTRAR UN SOLO EMPLEADO//////////////
void mostrarUnEmpleado(stEmpleado nuevoEmpleado)
{
    printf("\nEl nombre y Apellido del empleado: %s\n", nuevoEmpleado.nombreYapellido);
    printf("El legajo del empleado es: %d\n", nuevoEmpleado.legajo);
    printf("El dni del empleado es: %s\n", nuevoEmpleado.dni);
    printf("La antiguedad del empleado es: %s\n", nuevoEmpleado.antiguedad);
    printf("El sexo del empleado: %c\n", nuevoEmpleado.sexo);
    printf("La cantidad de ventas del empleado es: %d\n", nuevoEmpleado.cantidadDeVentas);
    printf("El sueldo del empleado es: %d\n", nuevoEmpleado.sueldo);
    printf("El estado del empleado es: %d\n", nuevoEmpleado.estado);
    printf("\n-----------------------------------------------------------\n");
}

///MOSTRAR ARCHIVO DE EMPLEADOS/////////
void mostrarEmpleados(char emple[])
{
    FILE *archivo= fopen(emple, "rb");
    stEmpleado aux;

    if(archivo)
    {
        while(fread(&aux, sizeof(stEmpleado), 1, archivo) >0)
        {
            mostrarUnEmpleado(aux);
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: El archivo no pudo abrirse.\n");
    }
}

///MOSTRAR SUELDOS PASADOS DEL EMPLEADO/////////
void mostrarSueldosPasados(char emple[], char dni[])
{
    FILE *archivo = fopen(emple, "rb");
    stEmpleado aux;
    bool encontrado = false;

    if (archivo)
    {
        while (fread(&aux, sizeof(stEmpleado), 1, archivo) > 0)
        {
            if (strcmp(aux.dni, dni) == 0)
            {
                encontrado = true;
                printf("Sueldos pasados del empleado %s:\n", aux.nombreYapellido);
                mostrar(&aux.sueldosPasados);
                break;
            }
        }
        if (!encontrado)
        {
            printf("\nERROR: No se encontrÃ³ ningÃºn empleado con este DNI.\n");
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: El archivo no pudo abrirse.\n");
    }
}
///-----------------------------------------------------------/////////////////
///----------APARTADO EXCLUSIVAMENTE DE BAJA------------------/////////////////
///-----------------------------------------------------------/////////////////

///BUSCAR Y DAR DE BAJA UN EMPLEADO////////////////////
void buscarYeliminar(char emple[], char eliminados[], char dni[])
{
    FILE *archivo= fopen(emple,"r+b");
    FILE *archivoDos= fopen(eliminados, "ab");

    bool encontrado=false;
    stEmpleado aux;

    if(archivo && archivoDos)
    {
        while(fread(&aux, sizeof(stEmpleado), 1, archivo) >0)
        {
            if(strcmp(aux.dni, dni) == 0)
            {
                encontrado=true;

                aux.estado=0;
                fseek(archivo, -sizeof(stEmpleado), SEEK_CUR);
                fwrite(&aux, sizeof(stEmpleado), 1, archivo);
                fwrite(&aux, sizeof(stEmpleado), 1, archivoDos);
                printf("\nPelicula eliminada correctamente.\n");
                break;
            }
        }
        if(!encontrado)
        {
            printf("\nERROR: No se encontro ningun Empleado asociado a este DNI.\n");
        }
        fclose(archivo);
        fclose(archivoDos);
    }
    else
    {
        printf("\nERROR: No se pudo abrir el archivo.\n");
    }
}

///MOSTRAR EMPLEADOS DADOS DE BAJA/////////////////////
void mostrarEmpleBajados(char elimanods[])
{
    FILE *archivo=fopen(elimanods,"rb");
    stEmpleado aux;

    if(archivo)
    {
        while(fread(&aux, sizeof(stEmpleado), 1, archivo) >0)
        {
            mostrarUnEmpleado(aux);
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: El archivo no pudo abrirse.\n");
    }
}


///-----------------------------------------------------------/////////////////
///---APARTADO EXCLUSIVAMENTE DE MODIFICACION DE ARCHIVOS-----/////////////////
///-----------------------------------------------------------/////////////////


///BUSCAR Y MODIFICAR UNA EMPLEADO////////////////
void buscarYmodificarUnEmpleado(char emple[], char dni[])
{
    FILE *archivo=fopen(emple,"r+b");
    stEmpleado aux;

    bool encontrado=false;

    if(archivo)
    {
        while(fread(&aux, sizeof(stEmpleado), 1, archivo) >0)
        {
            if(strcmp(aux.dni, dni) == 0)
            {
                encontrado=true;

                char continuar='s';
                int opcion=0;

                char nuevoNombre[50];
                int nuevoLegajo=0, nuevaVenta=0, nuevoSueldo=0;;

                do
                {
                    printf("\n\n-----MENU-----\n\n");
                    printf("\n--MODIFICACION DE EMPLEADOS--\n");
                    printf("1.Modificar nombre y apellido.\n2.Modificar legajo.\n3.Ingrese la nueva cantidad de ventas del empleado.\n4.Ingrese el nuevo sueldo del empleado.\n");
                    printf("7.Modificar sueldo.\n");
                    printf("Ingrese la opcion que desea realizar: \n");
                    scanf("%d", &opcion);

                    switch(opcion)
                    {
                    case 1:
                        printf("\nIngrese el nuevo nombre del empleado: \n");
                        fflush(stdin);
                        gets(nuevoNombre);

                        modificarNombre(emple, nuevoNombre);
                        break;
                    case 2:
                        printf("\nIngrese el nuevo legajo: \n");
                        scanf("%d", &nuevoLegajo);

                        modificarLegajo(emple, nuevoLegajo);
                        break;
                    case 3:
                        printf("\nIngrese la nueva cantidad de ventas del empleados: \n");
                        scanf("%d", &nuevaVenta);

                        modificarVentas(emple, nuevaVenta);
                        break;
                    case 4:
                        printf("\nIngrese el nuevo sueldo del empleado: \n");
                        scanf("%d", &nuevoSueldo);

                        modificarSueldo(emple, nuevoSueldo);
                        break;
                    default:
                        printf("\nERROR: La opcion ingresada no es validad.\n");
                        break;
                    }
                    printf("\nDesea seguir modificando empleados? (s|n)");
                    fflush(stdin);
                    scanf("%c", &continuar);
                }
                while(continuar=='s');
                break;
            }
        }
        if(!encontrado)
        {
            printf("\nERROR: No se ha encontrado el DNI buscado.\n");
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: El archivo no pudo abrise.\n");
    }
}

///**MODIFICAR NOMBRE**///////////////////////////////////
void modificarNombre(char emple[], char nuevoNombre[])
{
    FILE *archivo= fopen(emple,"r+b");
    stEmpleado aux;

    if(archivo)
    {
        while(fread(&aux, sizeof(stEmpleado), 1, archivo) >0)
        {
            strcpy(aux.nombreYapellido, nuevoNombre);
            fseek(archivo, -sizeof(stEmpleado), SEEK_CUR);
            fwrite(&aux, sizeof(stEmpleado), 1,archivo);
            printf("\Nombre modificado correctamente.\n");
            break;
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: No pudo abrirse el archivo.\n");
    }
}

///**MODIFICAR LEGAJO**//////////////////////////////////
void modificarLegajo(char emple[], int nuevoLegajo)
{
    FILE *archivo= fopen(emple, "r+b");
    stEmpleado aux;

    if(archivo)
    {
        while(fread(&aux, sizeof(stEmpleado), 1,archivo) >0)
        {
            aux.legajo=nuevoLegajo;

            fseek(archivo, -sizeof(stEmpleado), SEEK_CUR);
            fwrite(&aux, sizeof(stEmpleado), 1, archivo);
            printf("\nEl legajo fue modificado exitosamente.\n");
            break;
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: El archivo no pudo abrirse correctamente.\n");
    }
}

///----------------------------------------
///**MODIFICAR CANTIDAD DE VENTAS//////////
///----------------------------------------
void modificarVentas(char emple[], int nuevaVenta)
{
    FILE *archivo= fopen(emple, "r+b");
    stEmpleado aux;

    if(archivo)
    {
        while(fread(&aux, sizeof(stEmpleado), 1, archivo) >0)
        {
            aux.cantidadDeVentas = nuevaVenta;

            fseek(archivo, -sizeof(stEmpleado), SEEK_CUR);
            fwrite(&aux, sizeof(stEmpleado), 1, archivo);
            printf("\nCantidad de ventas modificada con exito.\n");
            break;
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: El archivo noi pudo abrirse.\n");
    }
}

///----------------------------------------
///**MODIFICAR SUELDO//////////////////////
///----------------------------------------
void modificarSueldo(char emple[], int nuevoSueldo)
{
    FILE *archivo= fopen(emple, "r+b");
    stEmpleado aux;

    if(archivo)
    {
        while(fread(&aux, sizeof(stEmpleado), 1, archivo) >0)
        {
            inicpila(&aux.sueldosPasados);
            apilar(aux.sueldosPasados, aux.sueldo);

            aux.sueldo = nuevoSueldo;

            fseek(archivo, -sizeof(stEmpleado), SEEK_CUR);
            fwrite(&aux, sizeof(stEmpleado), 1, archivo);
            printf("\nEl sueldo a sido modificado exitosamente.\n");
            break;
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: El archivo no pudo abrirse.\n");
    }
}

///-----------------------------------------------------------/////////////////
///---APARTADO EXCLUSIVAMENTE PARA BUSCAR UN ARCHIVO----------/////////////////
///-----------------------------------------------------------/////////////////


///---------------------------------------
///**MENU PARA BUSCAR EMPLEADO////////////
///---------------------------------------
void menuParaBuscar(char emple[])
{
    FILE *archivo= fopen(emple, "rb");
    stEmpleado aux;

    if(archivo)
    {
        while(fread(&aux, sizeof(stEmpleado), 1,archivo) >0)
        {
            char control='s';
            int opcion=0;

            char nombreApellido[50];
            char dni[16];
            char anti[50];
            int legajo=0;

            do
            {
                printf("\n----------MENU---------");
                printf("\n--SUB-MENU PARA BUSCAR--\n");
                printf("1.Buscar por nombre.\n2.Buscar por legajo.\n3.Buscar por DNI.\n2");
                printf("\nIngrese la opcion que desea realizar: \n");
                scanf("%d", &opcion);

                switch(opcion)
                {
                case 1:
                    printf("\nIngrese el nombre del empleado que desea buscar: \n");
                    fflush(stdin);
                    gets(nombreApellido);

                    BuscarPorNombre(emple, nombreApellido);
                    break;
                case 2:
                    printf("\nIngrese el legajo del empleado que desea buscar: \n");
                    scanf("%d", &legajo);

                    buscarPorLegajp(emple, legajo);
                    break;
                case 3:
                    printf("\nIngrese el DNI del empleado que desea buscar: \n");
                    fflush(stdin);
                    gets(dni);

                    buscarPorDni(emple, dni);
                    break;
                case 4:
                    printf("\nIngrese la antiguedad del empleado que desea buscar: \n");
                    fflush(stdin);
                    gets(anti);

                    buscarPorAntiguedad(emple, anti);
                    break;
                default:
                    printf("\nERROR: Opcion no valida.\n");
                    break;
                }

                printf("\nDesea seguir buscando por otras opciones? (s|n).\n");
                fflush(stdin);
                scanf("%c", &control);
            }
            while(control=='s');
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: No se pudo abrir el archivo.\n");
    }
}


///---------------------------------------
///**BUSCAR POR NOMBRE////////////////////
///---------------------------------------
void BuscarPorNombre(char emple[], char buscarNombre[])
{
    FILE *archivo=fopen(emple, "rb");
    stEmpleado aux;

    bool encontrado=false;

    if(archivo)
    {
        while(fread(&aux, sizeof(stEmpleado), 1,archivo) >0)
        {
            if(strcpy(aux.nombreYapellido, buscarNombre))
            {
                encontrado=true;
                mostrarUnEmpleado(aux);
                break;
            }
        }
        if(!encontrado)
        {
            printf("\nNo se encontrado ningun empleado con este nombre.\n");
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: No pudo abrirse el archivo.\n");
    }
}

///---------------------------------------
///**BUSCAR POR LEGAJO////////////////////
///---------------------------------------
void buscarPorLegajp(char emple[], int buscarLegajo)
{
    FILE *archivo= fopen(emple, "rb");
    stEmpleado aux;

    bool encontrado=false;

    if(archivo)
    {
        while(fread(&aux, sizeof(stEmpleado), 1, archivo) >0)
        {
            if(aux.legajo==buscarLegajo)
            {
                encontrado= true;
                mostrarUnEmpleado(aux);
                break;
            }
        }
        if(!encontrado)
        {
            printf("\nERROR: No se encontro ningun empleado con este legajo.\n");
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: No pudo abirse el archivo.\n");
    }
}

///---------------------------------------
///**BUSCAR POR DNI///////////////////////
///---------------------------------------
void buscarPorDni(char emple[], int buscarDni)
{
    FILE *archivo= fopen(emple, "rb");
    stEmpleado aux;

    bool encontrado=false;

    if(archivo)
    {
        while(fread(&aux, sizeof(stEmpleado), 1, archivo) >0)
        {
            if(strcpy(aux.dni, buscarDni))
            {
                encontrado=true;
                mostrarUnEmpleado(aux);
                break;
            }
        }
        if(!encontrado)
        {
            printf("\nERROR: No se encontro ningun empleado con este DNI.\n");
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: El archivo no pudo abrirse.\n");
    }
}

///---------------------------------------
///**BUSCAR POR ANTIGUEDAD////////////////
///---------------------------------------
void buscarPorAntiguedad(char emple[], char buscarAnti[])
{
    FILE *archivo= fopen(emple, "rb");
    stEmpleado aux;

    bool encontrado=false;

    if(archivo)
    {
        while(fread(&aux, sizeof(stEmpleado), 1, archivo) >0)
        {
            if(strcpy(aux.antiguedad, buscarAnti))
            {
                encontrado=true;
                mostrarUnEmpleado(aux);
                break;
            }
        }
        if(!encontrado)
        {
            printf("\nERROR: No se encontro ningun empleado con este antiguedad.\n");
        }
        fclose(archivo);
    }
    else
    {
        printf("\nERROR: El archivo no pudo abrirse.\n");
    }
}

///-----------------------------------------------------------/////////////////
///---APARTADO EXCLUSIVAMENTE PARA ORDENAR LOS ARCHIVOS-------/////////////////
///-----------------------------------------------------------/////////////////

void ordenarEmpleadoPorNombre(char emple[])
{
    FILE *archivo = fopen(emple, "r+b");

    if(archivo)
    {
        fseek(archivo, 0, SEEK_END);
        long cant = ftell(archivo);
        int numEmpleados = cant / sizeof(stEmpleado);
        fseek(archivo, 0, SEEK_SET);

        stEmpleado *empleadosArray = malloc(cant);
        fread(empleadosArray, sizeof(stEmpleado), numEmpleados, archivo);

        for(int i=0; i<numEmpleados -1;i++)
        {
            int minIndex = i;
            for(int j=i +1; j<numEmpleados;j++){
                if(strcmp(empleadosArray[j].nombreYapellido, empleadosArray[minIndex].nombreYapellido) <0)
                {
                    minIndex = j;
                }
            }
            if(minIndex != i)
            {
            stEmpleado temp= empleadosArray[i];
            empleadosArray[i]=empleadosArray[minIndex];
            empleadosArray[minIndex] = temp;
            }
        }
        for( int i=0; i<numEmpleados;i++)
        {
            mostrarUnEmpleado(empleadosArray[i]);
        }
        fclose(archivo);
    }else
    {
        printf("\nERROR: No pudo abrirse el archivo.\n");
    }
}

///SUB FUNCION////
void ordenarEmpleadosPorLegajo(stEmpleado empleadosArray[], int numEmpleados)
{
    for (int i = 1; i < numEmpleados; i++) {
        stEmpleado actual = empleadosArray[i];
        int j = i - 1;
        while (j >= 0 && empleadosArray[j].legajo > actual.legajo) {
            empleadosArray[j + 1] = empleadosArray[j];
            j--;
        }
        empleadosArray[j + 1] = actual;
    }
}

void ordenarPorLegajo(char emple[])
{
    FILE *archivo= fopen(emple, "r+b");
    if(archivo)
    {
        fseek(archivo, 0, SEEK_END);
        long cant= ftell(archivo);
        int numEmpleados= cant / sizeof(stEmpleado);
        fseek(archivo, 0, SEEK_SET);

        stEmpleado *empleadosArray = malloc(cant);
        fread(empleadosArray, sizeof(stEmpleado), numEmpleados, archivo);

        ordenarEmpleadosPorLegajo(empleadosArray, numEmpleados);

        for(int i=0; i < numEmpleados; i++)
        {
            mostrarUnEmpleado(empleadosArray[i]);
        }
        fclose(archivo);
    }else
    {
        printf("\nERROR: No se pudo abrir el archivo.\n");
    }
}

