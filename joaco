#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct
{
    char nombreYapellido[30];
    char dni[10];
    int edad;
    char sexo;
    char domicilio[50];
    int cantPrestamos;
    Prestamo prestamoActual;
    char nombrePrestamista[30];
    int activo;  // Hecho para la baja lógica: 1 para activo y 0 para inactivo
} Cliente;

void cargarClientes(Cliente A[], int *dimension, int dimensionMax);
int leerClientesDesdeArchivo(char archivoClientes[], Cliente A[], int dimensionMax);
void guardarClientesEnArchivo(char archivoClientes[], Cliente A[], int dimension);
void darDeBajaCliente(Cliente A[], int dimension);
void ordenarClientesPorNombre(Cliente A[], int dimension);
void ordenarClientesPorEdad(Cliente A[], int dimension);
void mostrarClientes(Cliente A[], int dimension);
void modificarCliente(Cliente A[], int dimension);
Cliente cargarUnCliente(Cliente A[], int dimension);

int main() {
    int dimensionMax = 50;
    Cliente clientes[dimensionMax];
    int dimensionActual = 0;

    dimensionActual = leerClientesDesdeArchivo("clientes.bin", clientes, dimensionMax);

    int opcion;
    do {
        printf("\n--- MENU ---\n");
        printf("1. Cargar clientes\n");
        printf("2. Dar de baja un cliente\n");
        printf("3. Guardar clientes en archivo\n");
        printf("4. Ordenar clientes por nombre\n");
        printf("5. Ordenar clientes por edad\n");
        printf("6. Mostrar clientes\n");
        printf("7. Modificar cliente\n");
        printf("8. Salir\n");
        printf("Elija una opcion: ");
        scanf("%d", &opcion);
        fflush(stdin);

        switch (opcion) {
            case 1:
                cargarClientes(clientes, &dimensionActual, dimensionMax);
                break;
            case 2:
                darDeBajaCliente(clientes, dimensionActual);
                break;
            case 3:
                guardarClientesEnArchivo("clientes.bin", clientes, dimensionActual);
                break;
            case 4:
                ordenarClientesPorNombre(clientes, dimensionActual);
                printf("Clientes ordenados por nombre.\n");
                break;
            case 5:
                ordenarClientesPorEdad(clientes, dimensionActual);
                printf("Clientes ordenados por edad.\n");
                break;
            case 6:
                mostrarClientes(clientes, dimensionActual);
                break;
            case 7:
                modificarCliente(clientes, dimensionActual);
                break;
            case 8:
                printf("Saliendo del sistema...\n");
                break;
            default:
                printf("Opcion no valida. Intente de nuevo.\n");
                break;
        }
    } while (opcion != 8);

    return 0;
}


//FUNCIONES

int dniExiste(Cliente A[], int dimension, char dni[]) {
    for (int i = 0; i < dimension; i++) {
        if (strcmp(A[i].dni, dni) == 0 && A[i].activo == 1) {
            return 1; //1 si se encuentra
        }
    }

    return 0; //0 si no se encuentra
}


Cliente cargarUnCliente(Cliente A[], int dimension)
{
    Cliente a;

    do {
        printf("\nIngrese el DNI del cliente a cargar\n");
        scanf(" %s", a.dni);
        if (dniExiste(A, dimension, a.dni)) {
            printf("Error: El cliente ese DNI ya existe en el sistema. Intente de nuevo con otro.\n");
        }
    } while (dniExiste(A, dimension, a.dni));

    printf("\nIngrese Nombre y Apellido del cliente\n");
    gets(a.nombreYapellido);

    printf("\nIngrese la edad del cliente\n");
    scanf("%d", &a.edad);
    fflush(stdin);

    printf("\nIngrese el genero del cliente: (m o f)\n");
    scanf(" %c", &a.sexo);
    fflush(stdin);

    printf("\nIngrese el domicilio del cliente\n");
    gets(a.domicilio);

    printf("\nIngrese cuántos prestamos tiene el cliente\n");
    scanf("%d", &a.cantPrestamos);
    fflush(stdin);

    // a.prestamoActual = cargarUnPrestamo();

    printf("\nIngrese quien le dio el prestamo al cliente\n");
    gets(a.nombrePrestamista));

    a.activo = 1;

    return a;
}

void cargarClientes(Cliente A[], int *dimension, int dimensionMax) {
    char control = 's';

    while (*dimension < dimensionMax && control == 's') {
        A[*dimension] = cargarUnCliente(A, *dimension);
        (*dimension)++;

        printf("¿Quiere cargar otro cliente? (s/n)\n");
        scanf(" %c", &control);
        fflush(stdin);
    }
}

int leerClientesDesdeArchivo(char archivoClientes[], Cliente A[], int dimensionMax)
{
    FILE *buffer2 = fopen(archivoClientes, "rb");
    int leidos = 0;
    if (buffer2 != NULL)
    {
        leidos = fread(A, sizeof(Cliente), dimensionMax, buffer2);
        fclose(buffer2);
        printf("Clientes leidos satifactoriamente desde el archivo.\n");
    }
    else
    {
        printf("Error al abrir el archivo\n");
    }
    return leidos;
}

void guardarClientesEnArchivo(char archivoClientes[], Cliente A[], int dimension)
{
    FILE *buffer1 = fopen(archivoClientes, "wb");
    if (buffer1 != NULL)
    {
        fwrite(A, sizeof(Cliente), dimension, buffer1);
        fclose(buffer1);
        printf("Clientes guardados en el archivo.\n");
    }
    else
    {
        printf("Error al abrir el archivo");
    }
}

void darDeBajaCliente(Cliente A[], int dimension) {
    char dni[10];
    printf("Ingrese el DNI del cliente a dar de baja: ");
    scanf(" %s", dni);
    fflush(stdin);

    int encontrado = 0;
    for (int i = 0; i < dimension; i++) {
        if (strcmp(A[i].dni, dni) == 0 && A[i].activo == 1) {
            A[i].activo = 0;
            encontrado = 1;
            printf("El cliente con DNI: %s ha sido dado de baja.\n", dni);
            break;
        }
    }

    if (!encontrado) {
        printf("El cliente con DNI: %s no se encuentra o ya esta dado de baja.\n", dni);
    }
}

///ORDENAMIENTOS

//Nombre y Apellido (Metodo de Seleccion)


void intercambiarClientes(Cliente *a, Cliente *b) {
    Cliente temp = *a;
    *a = *b;
    *b = temp;
}

void ordenarClientesPorNombre(Cliente A[], int dimension) {
    for (int i = 0; i < dimension - 1; i++) {
        int minIndex = i;
        for (int j = i + 1; j < dimension; j++) {
            if (strcmp(A[j].nombreYapellido, A[minIndex].nombreYapellido) < 0) {
                minIndex = j;
            }
        }
        intercambiarClientes(&A[i], &A[minIndex]);
    }
}

//Por edad  (Metodo de Insercion)

void ordenarClientesPorEdad(Cliente A[], int dimension) {
    for (int i = 1; i < dimension; i++) {
        Cliente temp = A[i];
        int j = i - 1;
        while (j >= 0 && A[j].edad > temp.edad) {
            A[j + 1] = A[j];
            j--;
        }
        A[j + 1] = temp;
    }
}

void mostrarClientes(Cliente A[], int dimension) {
    for (int i = 0; i < dimension; i++) {
        if (A[i].activo == 1) {
            printf("Nombre y Apellido: %s\n", A[i].nombreYapellido);
            printf("DNI: %s\n", A[i].dni);
            printf("Edad: %d\n", A[i].edad);
            printf("Sexo: %c\n", A[i].sexo);
            printf("Domicilio: %s\n", A[i].domicilio);
            printf("Cantidad de Prestamos: %d\n", A[i].cantPrestamos);
            printf("Nombre del Prestamista: %s\n", A[i].nombrePrestamista);
            printf("----------------------------------\n");
        }
    }
}

void modificarCliente(Cliente A[], int dimension) {
    char dni[10];
    printf("Ingrese el DNI del cliente a modificar: ");
    scanf(" %s", dni);
    fflush(stdin);

    for (int i = 0; i < dimension; i++) {
        if (strcmp(A[i].dni, dni) == 0 && A[i].activo == 1) {
            printf("\nModificar domicilio del cliente\n");
            scanf(" %[^\n]s", A[i].domicilio);
            getchar(); // Limpiar el buffer de entrada

            printf("\nModificar cantidad de prestamos del cliente\n");
            scanf("%d", &A[i].cantPrestamos);
            getchar(); // Limpiar el buffer de entrada

            printf("Cliente modificado exitosamente.\n");
            return;
        }
    }
    printf("El cliente con DNI: %s no se encuentra o está inactivo.\n", dni);
}
